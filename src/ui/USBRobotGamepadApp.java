/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * USBRobotGamepadApp.java
 *
 * Created on Jan 3, 2012, 9:19:17 PM
 */
package ui;

import commonutilities.swing.ComponentPosition;
import configuration.Configuration;
import java.io.File;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.java.games.input.Controller;
import net.java.games.input.Version;
import ui.installation.JinputInstallationFrame;
import ui.installation.RxtxInstallationFrame;

/**
 * The main controller application
 * @author Parham
 */
public class USBRobotGamepadApp extends javax.swing.JFrame implements Observer {

    private static USBRobotGamepadAppController mController;
    private String mFirstListEntry = "No Controller Selected";
    private boolean mComboBoxesUpdated = false;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if (args.length == 0){
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    //Center the frame and set look and feel
                    setLookAndFeel();
                    //Perform cofiguration checks
                    Configuration.getInstance().configurationChecks();
                    //Instamtiate the application
                    USBRobotGamepadApp gamepadApp = new USBRobotGamepadApp();
                    USBRobotGamepadAppModel model = new USBRobotGamepadAppModel(gamepadApp);
                    model.addObserver(gamepadApp);
                    model.initModel();
                    model.notifyObservers();
                    mController = new USBRobotGamepadAppController(model);
                    ComponentPosition.centerFrame(gamepadApp);
                    gamepadApp.setVisible(true);
                }
            });
        } else if (args.length > 0){
            switch (args[0]) {
                case "rxtx":
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setLookAndFeel();
                            //Center the frame
                            RxtxInstallationFrame dialog = new RxtxInstallationFrame();
                            ComponentPosition.centerFrame(dialog);
                            dialog.setVisible(true);
                        }
                    });
                    break;
                case "jinput":
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setLookAndFeel();
                            //Center the frame
                            JinputInstallationFrame dialog = new JinputInstallationFrame();
                            ComponentPosition.centerFrame(dialog);
                            dialog.setVisible(true);
                        }
                    });
                    break;
                default:
                    System.out.println("Valid arguments:"
                            + "\n rxtx - to copy RxTx support files to bin directory"
                            + "\n jinput - to copy Jinput support files to bin directory");
                    break;
            }
        }
    }

    /** Creates new form USBRobotGamepadApp */
    public USBRobotGamepadApp() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mControllerLabel = new javax.swing.JLabel();
        mControllerModelLabel = new javax.swing.JLabel();
        mControllerComboBox = new javax.swing.JComboBox();
        mModelsComboBox = new javax.swing.JComboBox();
        mStopButton = new javax.swing.JButton();
        mStartButton = new javax.swing.JButton();
        mLastCommandStringLabel = new javax.swing.JLabel();
        mCommandTextField = new javax.swing.JTextField();
        mMenuBar = new javax.swing.JMenuBar();
        mFileMenu = new javax.swing.JMenu();
        mExitMenuItem = new javax.swing.JMenuItem();
        mEditMenu = new javax.swing.JMenu();
        mCharacterizeMenuItem = new javax.swing.JMenuItem();
        mSelectComPortMenuItem = new javax.swing.JMenuItem();
        mJinputVersionMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Robot Controller");

        mControllerLabel.setText("Controller:");

        mControllerModelLabel.setText("Controller Model:");

        mControllerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mControllerComboBoxActionPerformed(evt);
            }
        });

        mStopButton.setText("Stop");
        mStopButton.setEnabled(false);
        mStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mStopButtonActionPerformed(evt);
            }
        });

        mStartButton.setText("Start");
        mStartButton.setEnabled(false);
        mStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mStartButtonActionPerformed(evt);
            }
        });

        mLastCommandStringLabel.setText("Last Command String:");

        mFileMenu.setText("File");

        mExitMenuItem.setText("Exit");
        mExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mExitMenuItemActionPerformed(evt);
            }
        });
        mFileMenu.add(mExitMenuItem);

        mMenuBar.add(mFileMenu);

        mEditMenu.setText("Edit");

        mCharacterizeMenuItem.setText("Characterize Controller...");
        mCharacterizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCharacterizeMenuItemActionPerformed(evt);
            }
        });
        mEditMenu.add(mCharacterizeMenuItem);

        mSelectComPortMenuItem.setText("Select COM Port");
        mSelectComPortMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSelectComPortMenuItemActionPerformed(evt);
            }
        });
        mEditMenu.add(mSelectComPortMenuItem);

        mJinputVersionMenuItem.setText("Show JInput Version");
        mJinputVersionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJinputVersionMenuItemActionPerformed(evt);
            }
        });
        mEditMenu.add(mJinputVersionMenuItem);

        mMenuBar.add(mEditMenu);

        setJMenuBar(mMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mLastCommandStringLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mCommandTextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mControllerModelLabel)
                                    .addComponent(mControllerLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mModelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mControllerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(mStartButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mStopButton)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {mStartButton, mStopButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mControllerLabel)
                    .addComponent(mControllerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mControllerModelLabel)
                    .addComponent(mModelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mLastCommandStringLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mCommandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mStopButton)
                    .addComponent(mStartButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mExitMenuItemActionPerformed


    private void mJinputVersionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJinputVersionMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "JInput version: " + Version.getVersion(),  "JInput Version", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mJinputVersionMenuItemActionPerformed

    private void mCharacterizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCharacterizeMenuItemActionPerformed
        mController.characterizeJoystick();
    }//GEN-LAST:event_mCharacterizeMenuItemActionPerformed

    private void mStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mStartButtonActionPerformed
        mController.startGamepadThread(mControllerComboBox.getSelectedItem().toString(),mModelsComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_mStartButtonActionPerformed

    private void mControllerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mControllerComboBoxActionPerformed
        if (!mControllerComboBox.getSelectedItem().toString().equals(mFirstListEntry)){
            mController.joystickSelected(true);
        }
        else {
            mController.joystickSelected(false);
        }
    }//GEN-LAST:event_mControllerComboBoxActionPerformed

    private void mStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mStopButtonActionPerformed
        mController.stopThread();
    }//GEN-LAST:event_mStopButtonActionPerformed

    private void mSelectComPortMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSelectComPortMenuItemActionPerformed
        mController.selectCOMPort();
    }//GEN-LAST:event_mSelectComPortMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem mCharacterizeMenuItem;
    private javax.swing.JTextField mCommandTextField;
    private javax.swing.JComboBox mControllerComboBox;
    private javax.swing.JLabel mControllerLabel;
    private javax.swing.JLabel mControllerModelLabel;
    private javax.swing.JMenu mEditMenu;
    private javax.swing.JMenuItem mExitMenuItem;
    private javax.swing.JMenu mFileMenu;
    private javax.swing.JMenuItem mJinputVersionMenuItem;
    private javax.swing.JLabel mLastCommandStringLabel;
    private javax.swing.JMenuBar mMenuBar;
    private javax.swing.JComboBox mModelsComboBox;
    private javax.swing.JMenuItem mSelectComPortMenuItem;
    private javax.swing.JButton mStartButton;
    private javax.swing.JButton mStopButton;
    // End of variables declaration//GEN-END:variables

    private static void setLookAndFeel(){
        //Set the look and feel to Nimbus
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(USBRobotGamepadApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof USBRobotGamepadAppModel){
            USBRobotGamepadAppModel model = (USBRobotGamepadAppModel)o;
            if (!mComboBoxesUpdated){

                //Get available controllers
                Controller[] controllers = model.getAvailableControllers();
                List<String> controllerNames = new ArrayList<>();
                controllerNames.add(mFirstListEntry);
                for (Controller c : controllers){
                    controllerNames.add(c.getName());
                }
                mControllerComboBox.setModel(new DefaultComboBoxModel(controllerNames.toArray(new String[0])));

                //Get available model classes
                Map<File,String> modelToFileMap = model.getModelNameToFileName();
                String[] comboBoxNames = new String[modelToFileMap.size()];
                int indexVal = 0;
                for (File file : modelToFileMap.keySet()){
                    comboBoxNames[indexVal++] = modelToFileMap.get(file) + "-" + file.getName();
                }
                mModelsComboBox.setModel(new DefaultComboBoxModel(comboBoxNames));
                mComboBoxesUpdated = true;
            }

            if (model.isJoystickSelected() && model.isSerialportSelected()){
                mStartButton.setEnabled(true);
                mStopButton.setEnabled(true);
            } else {
                mStartButton.setEnabled(false);
                mStopButton.setEnabled(false);
            }

            mCommandTextField.setText(model.getCommandString());
        }
    }
}
