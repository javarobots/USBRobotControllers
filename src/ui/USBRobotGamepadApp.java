/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * USBRobotGamepadApp.java
 *
 * Created on Jan 3, 2012, 9:19:17 PM
 */
package ui;

import java.util.Observable;
import ui.characterize.CharacterizeDialog;
import commonutilities.swing.ComponentPosition;
import java.util.ArrayList;
import java.util.List;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.java.games.input.Controller;
import net.java.games.input.Version;
import ui.installation.JinputInstallationFrame;
import ui.installation.RxtxInstallationFrame;
import configuration.Configuration;

/**
 *
 * @author Parham
 */
public class USBRobotGamepadApp extends javax.swing.JFrame implements Observer {
    
    private static USBRobotGamepadAppController mController;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if (args.length == 0){
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    //Center the frame and set look and feel
                    setLookAndFeel();
                    //Perform cofiguration checks
                    Configuration.getInstance().configurationChecks();
                    //Instamtiate the application
                    USBRobotGamepadApp gamepadApp = new USBRobotGamepadApp();
                    USBRobotGamepadAppModel model = new USBRobotGamepadAppModel();
                    model.addObserver(gamepadApp);
                    model.initModel();
                    model.notifyObservers();
                    mController = new USBRobotGamepadAppController(model);
                    ComponentPosition.centerFrame(gamepadApp);
                    gamepadApp.setVisible(true);
                }
            });
        } else if (args.length == 1){
            if (args[0].equals("rxtx")){
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        setLookAndFeel();
                        //Center the frame
                        RxtxInstallationFrame dialog = new RxtxInstallationFrame();
                        ComponentPosition.centerFrame(dialog);
                        dialog.setVisible(true);
                    }
                });
            } else if (args[0].equals("jinput")){
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        setLookAndFeel();
                        //Center the frame
                        JinputInstallationFrame dialog = new JinputInstallationFrame();
                        ComponentPosition.centerFrame(dialog);
                        dialog.setVisible(true);
                    }
                });
            }
        }
    }

    /** Creates new form USBRobotGamepadApp */
    public USBRobotGamepadApp() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mControllerLabel = new javax.swing.JLabel();
        mControllerModelLabel = new javax.swing.JLabel();
        mControllerComboBox = new javax.swing.JComboBox();
        mModelsComboBox = new javax.swing.JComboBox();
        mScrollPane = new javax.swing.JScrollPane();
        mOutputTextArea = new javax.swing.JTextArea();
        mStopButton = new javax.swing.JButton();
        mStartButton = new javax.swing.JButton();
        mMenuBar = new javax.swing.JMenuBar();
        mFileMenu = new javax.swing.JMenu();
        mExitMenuItem = new javax.swing.JMenuItem();
        mEditMenu = new javax.swing.JMenu();
        mCharacterizeMenuItem = new javax.swing.JMenuItem();
        mJinputVersionMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Robot Controller");

        mControllerLabel.setText("Controller:");

        mControllerModelLabel.setText("Controller Model:");

        mOutputTextArea.setColumns(20);
        mOutputTextArea.setRows(5);
        mScrollPane.setViewportView(mOutputTextArea);

        mStopButton.setText("Stop");

        mStartButton.setText("Start");
        mStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mStartButtonActionPerformed(evt);
            }
        });

        mFileMenu.setText("File");

        mExitMenuItem.setText("Exit");
        mExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mExitMenuItemActionPerformed(evt);
            }
        });
        mFileMenu.add(mExitMenuItem);

        mMenuBar.add(mFileMenu);

        mEditMenu.setText("Edit");

        mCharacterizeMenuItem.setText("Characterize Controller...");
        mCharacterizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCharacterizeMenuItemActionPerformed(evt);
            }
        });
        mEditMenu.add(mCharacterizeMenuItem);

        mJinputVersionMenuItem.setText("Show JInput Version");
        mJinputVersionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJinputVersionMenuItemActionPerformed(evt);
            }
        });
        mEditMenu.add(mJinputVersionMenuItem);

        mMenuBar.add(mEditMenu);

        setJMenuBar(mMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mControllerModelLabel)
                            .addComponent(mControllerLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mModelsComboBox, 0, 294, Short.MAX_VALUE)
                            .addComponent(mControllerComboBox, 0, 294, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mStartButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mStopButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {mStartButton, mStopButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mControllerLabel)
                    .addComponent(mControllerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mControllerModelLabel)
                    .addComponent(mModelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mStopButton)
                    .addComponent(mStartButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mExitMenuItemActionPerformed


    private void mJinputVersionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJinputVersionMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "JInput version: " + Version.getVersion(),  "JInput Version", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mJinputVersionMenuItemActionPerformed

    private void mCharacterizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCharacterizeMenuItemActionPerformed
        CharacterizeDialog dialog = new CharacterizeDialog(this, true);
        ComponentPosition.centerFrame(dialog);
        dialog.setVisible(true);
    }//GEN-LAST:event_mCharacterizeMenuItemActionPerformed

    private void mStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mStartButtonActionPerformed
        mController.startGamepadThread(mControllerComboBox.getSelectedItem().toString(),mModelsComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_mStartButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem mCharacterizeMenuItem;
    private javax.swing.JComboBox mControllerComboBox;
    private javax.swing.JLabel mControllerLabel;
    private javax.swing.JLabel mControllerModelLabel;
    private javax.swing.JMenu mEditMenu;
    private javax.swing.JMenuItem mExitMenuItem;
    private javax.swing.JMenu mFileMenu;
    private javax.swing.JMenuItem mJinputVersionMenuItem;
    private javax.swing.JMenuBar mMenuBar;
    private javax.swing.JComboBox mModelsComboBox;
    private javax.swing.JTextArea mOutputTextArea;
    private javax.swing.JScrollPane mScrollPane;
    private javax.swing.JButton mStartButton;
    private javax.swing.JButton mStopButton;
    // End of variables declaration//GEN-END:variables

    private static void setLookAndFeel(){
        //Set the look and feel to Nimbus
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(USBRobotGamepadApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(USBRobotGamepadApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(USBRobotGamepadApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(USBRobotGamepadApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof USBRobotGamepadAppModel){
            USBRobotGamepadAppModel model = (USBRobotGamepadAppModel)o;
            
            //Get available controllers
            Controller[] controllers = model.getAvailableControllers();
            List<String> controllerNames = new ArrayList<String>();
            for (Controller c : controllers){
                controllerNames.add(c.getName());
            }
            mControllerComboBox.setModel(new DefaultComboBoxModel(controllerNames.toArray(new String[0])));
            
            //Get available model classes
            List<Class> availableModels = model.getAvailableClasses();
            String[] names = new String[availableModels.size()];
            int index = 0;
            for (Class c : availableModels){
                names[index++] = c.getName();
            }
            mModelsComboBox.setModel(new DefaultComboBoxModel(names));
        }    
    }
}
